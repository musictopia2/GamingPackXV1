using BasicGamingUIBlazorLibrary.GameGraphics.Base;
using CommonBasicStandardLibraries.AdvancedGeneralFunctionsAndProcesses.BasicExtensions;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using SvgHelper.Blazor.Logic;
using SvgHelper.Blazor.Logic.Classes.Interfaces;
using SvgHelper.Blazor.Logic.Classes.SubClasses;
using System.Drawing;
using cc = CommonBasicStandardLibraries.BasicDataSettingsAndProcesses.SColorString;
namespace BasicGamingUIBlazorLibrary.GameGraphics.GamePieces
{

    public class MarblePiece : ComponentBase
    {

        private ColorRecord? _previousRecord;
        private ColorRecord GetRecord => new ColorRecord(MainColor, MainGraphics!.IsSelected, MainGraphics.CustomCanDo.Invoke());
        //private string _previousColor = "";
        protected override void OnAfterRender(bool firstRender)
        {
            _previousRecord = GetRecord;
            base.OnAfterRender(firstRender);
        }
        protected override bool ShouldRender()
        {
            if (MainGraphics!.Animating || MainGraphics.ForceRender)
            {
                return true; //because you are doing animations.
            }
            return _previousRecord!.Equals(GetRecord) == false; //hopefully this simple now (?)
        }

        [CascadingParameter]
        public BasePieceGraphics? MainGraphics { get; set; }

        [Parameter]
        public string MainColor { get; set; } = cc.Transparent; //if not set, then nothing will show obviously.


        //had to remove usetrouble because does not work anyways anymore.

        //[Parameter]
        //public bool UseTrouble { get; set; }
        protected override void OnInitialized()
        {
            //this is where i set the values on the main graphics.
            MainGraphics!.OriginalSize = new SizeF(150, 150); //decided to use 150 by 150 this time.
            MainGraphics.BorderWidth = 1;
            MainGraphics.HighlightTransparent = true; //i think.
            base.OnInitialized();
        }
        private void BuildRadicalDefs(ISvg svg)
        {
            Defs defs = new Defs();
            RadialGradient radial = new RadialGradient();
            radial.ID = $"grad{MainColor}";
            radial.CX = "50%";
            radial.CY = "50%";
            radial.R = "50%";
            radial.FX = "50%";
            radial.FY = "50%";
            defs.Children.Add(radial);
            svg.Children.Add(defs); //hopefully this simple.
            Stop stop = new Stop();
            stop.Offset = "0%";
            stop.Stop_Color = "rgb(255,255,255)";
            stop.Stop_Opacity = "1";
            radial.Children.Add(stop);
            stop = new Stop();
            stop.Offset = "100%";
            stop.Stop_Color = MainColor.ToWebColor();
            stop.Stop_Opacity = "1";
            radial.Children.Add(stop);
        }
        private void DrawRegularMarblePiece(ISvg svg)
        {
            BuildRadicalDefs(svg);
            Ellipse ellipse = new Ellipse();
            ellipse.CX = "75";
            ellipse.CY = "75";
            ellipse.RY = "75";
            ellipse.Fill = $"url(#grad{MainColor})";
            svg.Children.Add(ellipse);
        }
        //private void DrawTroubleMarblePiece(ISvg svg)
        //{
        //    string newColor = MainColor.ToWebColor();
        //    Path path = new Path();
        //    path.Fill = newColor;
        //    path.D = "M16.6667 25L83.3333 25L83.3333 58.3333Q83.3333 58.9471 83.2932 59.56Q83.253 60.173 83.1728 60.7838Q83.0926 61.3945 82.9725 62.0016Q82.8525 62.6087 82.6928 63.2106Q82.5332 63.8125 82.3344 64.4078Q82.1355 65.0032 81.898 65.5904Q81.6605 66.1777 81.3848 66.7556Q81.1091 67.3334 80.796 67.9004Q80.4828 68.4674 80.133 69.0222Q79.7831 69.577 79.3974 70.1182Q79.0116 70.6595 78.591 71.1859Q78.1703 71.7123 77.7157 72.2226Q77.261 72.7329 76.7736 73.2258Q76.2861 73.7188 75.767 74.1932Q75.2479 74.6676 74.6984 75.1223Q74.1488 75.577 73.5702 76.011Q72.9916 76.445 72.3853 76.8571Q71.779 77.2693 71.1465 77.6586Q70.5139 78.0479 69.8566 78.4135Q69.1994 78.7791 68.519 79.1201Q67.8386 79.461 67.1368 79.7766Q66.4349 80.0921 65.7132 80.3814Q64.9916 80.6707 64.2518 80.9331Q63.5121 81.1955 62.7561 81.4303Q62.0001 81.6652 61.2297 81.8719Q60.4592 82.0787 59.6762 82.2568Q58.8931 82.435 58.0993 82.5841Q57.3056 82.7332 56.503 82.853Q55.7004 82.9727 54.891 83.0628Q54.0816 83.1528 53.2672 83.213Q52.4529 83.2731 51.6356 83.3032Q50.8183 83.3333 50 83.3333Q49.1817 83.3333 48.3644 83.3032Q47.5471 83.2731 46.7328 83.213Q45.9184 83.1528 45.109 83.0628Q44.2996 82.9727 43.497 82.853Q42.6944 82.7332 41.9007 82.5841Q41.1069 82.435 40.3238 82.2568Q39.5408 82.0787 38.7703 81.8719Q37.9999 81.6652 37.2439 81.4303Q36.4879 81.1955 35.7482 80.9331Q35.0084 80.6707 34.2868 80.3814Q33.5651 80.0921 32.8632 79.7766Q32.1614 79.461 31.481 79.1201Q30.8006 78.7791 30.1434 78.4135Q29.4861 78.0479 28.8536 77.6586Q28.221 77.2693 27.6147 76.8571Q27.0084 76.445 26.4298 76.011Q25.8512 75.577 25.3016 75.1223Q24.7521 74.6676 24.233 74.1932Q23.7139 73.7188 23.2264 73.2258Q22.739 72.7329 22.2843 72.2226Q21.8297 71.7123 21.409 71.1859Q20.9884 70.6595 20.6026 70.1182Q20.2169 69.577 19.867 69.0222Q19.5172 68.4674 19.204 67.9004Q18.8909 67.3334 18.6152 66.7556Q18.3395 66.1777 18.102 65.5904Q17.8645 65.0032 17.6656 64.4078Q17.4668 63.8125 17.3072 63.2106Q17.1475 62.6087 17.0274 62.0016Q16.9074 61.3945 16.8272 60.7838Q16.747 60.173 16.7068 59.56Q16.6667 58.9471 16.6667 58.3333L16.6667 25Z";
        //    svg.Children.Add(path);
        //    Defs defs = new Defs();
        //    svg.Children.Add(defs);
        //    LinearGradient linear = new LinearGradient();
        //    linear.ID = "gradient_0";
        //    linear.GradientUnits = "userSpaceOnUse";
        //    linear.X1 = "0";
        //    linear.X2 = "100";
        //    linear.Y1 = "0";
        //    linear.Y2 = "0";
        //    defs.Children.Add(linear);
        //    Stop stop = new Stop();
        //    stop.Offset = "0";
        //    stop.Stop_Color = "rgb(255,255,255)";
        //    stop.Stop_Opacity = "0.58823532";
        //    linear.Children.Add(stop);
        //    stop = new Stop();
        //    stop.Offset = "1";
        //    stop.Stop_Color = "rgb(0,0,0)";
        //    stop.Stop_Opacity = "0.58823532";
        //    linear.Children.Add(stop);
        //    path = new Path();
        //    path.Fill = "url(#gradient_0)";
        //    path.D = "M16.6667 25L83.3333 25L83.3333 58.3333Q83.3333 58.9471 83.2932 59.56Q83.253 60.173 83.1728 60.7838Q83.0926 61.3945 82.9725 62.0016Q82.8525 62.6087 82.6928 63.2106Q82.5332 63.8125 82.3344 64.4078Q82.1355 65.0032 81.898 65.5904Q81.6605 66.1777 81.3848 66.7556Q81.1091 67.3334 80.796 67.9004Q80.4828 68.4674 80.133 69.0222Q79.7831 69.577 79.3974 70.1182Q79.0116 70.6595 78.591 71.1859Q78.1703 71.7123 77.7157 72.2226Q77.261 72.7329 76.7736 73.2258Q76.2861 73.7188 75.767 74.1932Q75.2479 74.6676 74.6984 75.1223Q74.1488 75.577 73.5702 76.011Q72.9916 76.445 72.3853 76.8571Q71.779 77.2693 71.1465 77.6586Q70.5139 78.0479 69.8566 78.4135Q69.1994 78.7791 68.519 79.1201Q67.8386 79.461 67.1368 79.7766Q66.4349 80.0921 65.7132 80.3814Q64.9916 80.6707 64.2518 80.9331Q63.5121 81.1955 62.7561 81.4303Q62.0001 81.6652 61.2297 81.8719Q60.4592 82.0787 59.6762 82.2568Q58.8931 82.435 58.0993 82.5841Q57.3056 82.7332 56.503 82.853Q55.7004 82.9727 54.891 83.0628Q54.0816 83.1528 53.2672 83.213Q52.4529 83.2731 51.6356 83.3032Q50.8183 83.3333 50 83.3333Q49.1817 83.3333 48.3644 83.3032Q47.5471 83.2731 46.7328 83.213Q45.9184 83.1528 45.109 83.0628Q44.2996 82.9727 43.497 82.853Q42.6944 82.7332 41.9007 82.5841Q41.1069 82.435 40.3238 82.2568Q39.5408 82.0787 38.7703 81.8719Q37.9999 81.6652 37.2439 81.4303Q36.4879 81.1955 35.7482 80.9331Q35.0084 80.6707 34.2868 80.3814Q33.5651 80.0921 32.8632 79.7766Q32.1614 79.461 31.481 79.1201Q30.8006 78.7791 30.1434 78.4135Q29.4861 78.0479 28.8536 77.6586Q28.221 77.2693 27.6147 76.8571Q27.0084 76.445 26.4298 76.011Q25.8512 75.577 25.3016 75.1223Q24.7521 74.6676 24.233 74.1932Q23.7139 73.7188 23.2264 73.2258Q22.739 72.7329 22.2843 72.2226Q21.8297 71.7123 21.409 71.1859Q20.9884 70.6595 20.6026 70.1182Q20.2169 69.577 19.867 69.0222Q19.5172 68.4674 19.204 67.9004Q18.8909 67.3334 18.6152 66.7556Q18.3395 66.1777 18.102 65.5904Q17.8645 65.0032 17.6656 64.4078Q17.4668 63.8125 17.3072 63.2106Q17.1475 62.6087 17.0274 62.0016Q16.9074 61.3945 16.8272 60.7838Q16.747 60.173 16.7068 59.56Q16.6667 58.9471 16.6667 58.3333L16.6667 25Z";
        //    svg.Children.Add(path);
        //    path = new Path();
        //    path.Fill = newColor;
        //    path.D = "M83.3333 25Q83.3333 25.6137 83.2932 26.2267Q83.253 26.8397 83.1728 27.4504Q83.0926 28.0612 82.9725 28.6683Q82.8525 29.2753 82.6928 29.8773Q82.5332 30.4792 82.3344 31.0745Q82.1355 31.6698 81.898 32.2571Q81.6605 32.8444 81.3848 33.4222Q81.1091 34.0001 80.796 34.5671Q80.4828 35.1341 80.133 35.6889Q79.7831 36.2437 79.3974 36.7849Q79.0116 37.3262 78.591 37.8526Q78.1703 38.379 77.7157 38.8892Q77.261 39.3995 76.7736 39.8925Q76.2861 40.3854 75.767 40.8598Q75.2479 41.3342 74.6984 41.789Q74.1488 42.2437 73.5702 42.6777Q72.9916 43.1116 72.3853 43.5238Q71.779 43.9359 71.1465 44.3253Q70.5139 44.7146 69.8566 45.0802Q69.1994 45.4458 68.519 45.7867Q67.8386 46.1277 67.1368 46.4432Q66.4349 46.7587 65.7132 47.048Q64.9916 47.3373 64.2518 47.5997Q63.5121 47.8621 62.7561 48.097Q62.0001 48.3318 61.2297 48.5386Q60.4592 48.7454 59.6762 48.9235Q58.8931 49.1017 58.0993 49.2508Q57.3056 49.3999 56.503 49.5196Q55.7004 49.6394 54.891 49.7294Q54.0816 49.8195 53.2672 49.8796Q52.4529 49.9398 51.6356 49.9699Q50.8183 50 50 50Q49.1817 50 48.3644 49.9699Q47.5471 49.9398 46.7328 49.8796Q45.9184 49.8195 45.109 49.7294Q44.2996 49.6394 43.497 49.5196Q42.6944 49.3999 41.9007 49.2508Q41.1069 49.1017 40.3238 48.9235Q39.5408 48.7454 38.7703 48.5386Q37.9999 48.3318 37.2439 48.097Q36.4879 47.8621 35.7482 47.5997Q35.0084 47.3373 34.2868 47.048Q33.5651 46.7587 32.8632 46.4432Q32.1614 46.1277 31.481 45.7867Q30.8006 45.4458 30.1434 45.0802Q29.4861 44.7146 28.8536 44.3253Q28.221 43.9359 27.6147 43.5238Q27.0084 43.1116 26.4298 42.6777Q25.8512 42.2437 25.3016 41.789Q24.7521 41.3342 24.233 40.8598Q23.7139 40.3854 23.2264 39.8925Q22.739 39.3995 22.2843 38.8892Q21.8297 38.379 21.409 37.8526Q20.9884 37.3262 20.6026 36.7849Q20.2169 36.2437 19.867 35.6889Q19.5172 35.1341 19.204 34.5671Q18.8909 34.0001 18.6152 33.4222Q18.3395 32.8444 18.102 32.2571Q17.8645 31.6698 17.6656 31.0745Q17.4668 30.4792 17.3072 29.8773Q17.1475 29.2753 17.0274 28.6683Q16.9074 28.0612 16.8272 27.4504Q16.747 26.8397 16.7068 26.2267Q16.6667 25.6137 16.6667 25Q16.6667 24.3863 16.7068 23.7733Q16.747 23.1603 16.8272 22.5496Q16.9074 21.9388 17.0274 21.3317Q17.1475 20.7247 17.3072 20.1227Q17.4668 19.5208 17.6656 18.9255Q17.8645 18.3302 18.102 17.7429Q18.3395 17.1556 18.6152 16.5778Q18.8909 15.9999 19.204 15.4329Q19.5172 14.8659 19.867 14.3111Q20.2169 13.7563 20.6026 13.2151Q20.9884 12.6738 21.409 12.1474Q21.8297 11.621 22.2843 11.1107Q22.739 10.6005 23.2264 10.1075Q23.7139 9.61458 24.233 9.14017Q24.7521 8.66576 25.3016 8.21103Q25.8512 7.75629 26.4298 7.32233Q27.0084 6.88837 27.6147 6.47622Q28.221 6.06408 28.8536 5.67474Q29.4861 5.2854 30.1434 4.91981Q30.8006 4.55422 31.481 4.21326Q32.1614 3.8723 32.8632 3.55678Q33.5651 3.24127 34.2868 2.95197Q35.0084 2.66266 35.7482 2.40027Q36.4879 2.13787 37.2439 1.90301Q37.9999 1.66815 38.7703 1.4614Q39.5408 1.25464 40.3238 1.07649Q41.1069 0.898339 41.9007 0.749219Q42.6944 0.600098 43.497 0.480368Q44.2996 0.360638 45.109 0.270587Q45.9184 0.180536 46.7328 0.120382Q47.5471 0.0602272 48.3644 0.0301136Q49.1817 0 50 0Q50.8183 0 51.6356 0.0301136Q52.4529 0.0602272 53.2672 0.120382Q54.0816 0.180536 54.891 0.270587Q55.7004 0.360638 56.503 0.480368Q57.3056 0.600098 58.0993 0.749219Q58.8931 0.898339 59.6762 1.07649Q60.4592 1.25464 61.2297 1.4614Q62.0001 1.66815 62.7561 1.90301Q63.5121 2.13787 64.2518 2.40027Q64.9915 2.66266 65.7132 2.95197Q66.4349 3.24127 67.1368 3.55678Q67.8386 3.8723 68.519 4.21326Q69.1994 4.55422 69.8566 4.91981Q70.5139 5.2854 71.1464 5.67474Q71.779 6.06408 72.3853 6.47622Q72.9916 6.88837 73.5702 7.32233Q74.1488 7.75629 74.6984 8.21103Q75.2479 8.66576 75.767 9.14017Q76.2861 9.61458 76.7736 10.1075Q77.261 10.6005 77.7157 11.1107Q78.1703 11.621 78.591 12.1474Q79.0117 12.6738 79.3974 13.2151Q79.7831 13.7563 80.133 14.3111Q80.4828 14.8659 80.796 15.4329Q81.1091 15.9999 81.3848 16.5777Q81.6605 17.1556 81.898 17.7429Q82.1356 18.3302 82.3344 18.9255Q82.5332 19.5208 82.6928 20.1227Q82.8525 20.7247 82.9725 21.3317Q83.0926 21.9388 83.1728 22.5496Q83.253 23.1603 83.2932 23.7733Q83.3333 24.3863 83.3333 25Z";
        //    svg.Children.Add(path);
        //    defs = new Defs();
        //    svg.Children.Add(defs);

        //    linear = new LinearGradient();
        //    linear.ID = "gradient_1";
        //    linear.GradientUnits = "userSpaceOnUse";
        //    linear.X1 = "0";
        //    linear.X2 = "100";
        //    linear.Y1 = "0";
        //    linear.Y2 = "0";
        //    defs.Children.Add(linear);
        //    stop = new Stop();
        //    stop.Offset = "0";
        //    stop.Stop_Color = "rgb(0,0,0)";
        //    stop.Stop_Opacity = "0.58823532";
        //    linear.Children.Add(stop);
        //    stop = new Stop();
        //    stop.Offset = "1";
        //    stop.Stop_Color = "rgb(255,255,255)";
        //    stop.Stop_Opacity = "0.58823532";
        //    linear.Children.Add(stop);
        //    Ellipse ellipse = new Ellipse();
        //    ellipse.Fill = "url(#gradient_1)";
        //    ellipse.CX = "50.000004";
        //    ellipse.CY = "25";
        //    ellipse.RX = "16.666668";
        //    ellipse.RY = "12.5";
        //    svg.Children.Add(ellipse);
        //}
        protected override void BuildRenderTree(RenderTreeBuilder builder)
        {
            ISvg svg = MainGraphics!.GetMainSvg(false); //try to set this to false (?)
            SvgRenderClass render = new SvgRenderClass();

            DrawRegularMarblePiece(svg);

            //if (UseTrouble == false)
            //{
            //    DrawRegularMarblePiece(svg);
            //}
            //else
            //{
            //    DrawTroubleMarblePiece(svg);
            //}
            render.RenderSvgTree(svg, 0, builder);
            base.BuildRenderTree(builder);
        }
    }
}